{"version":3,"file":"commonHelpers.js","sources":["../src/js/1-timer.js"],"sourcesContent":["import flatpickr from 'flatpickr';\nimport 'flatpickr/dist/flatpickr.min.css';\nimport iziToast from 'izitoast';\nimport 'izitoast/dist/css/iziToast.min.css';\n\nlet userSelectedDate;\nlet timeInterval;\n\nconst options = {\n  enableTime: true,\n  time_24hr: true,\n  defaultDate: new Date(),\n  minuteIncrement: 1,\n  onClose(selectedDates) {\n    userSelectedDate = selectedDates[0];\n    timeInterval = userSelectedDate - options.defaultDate;\n    if (userSelectedDate < options.defaultDate) {\n      iziToast.error({\n        color: 'red',\n        theme: 'dark',\n        position: 'topCenter',\n        message: `Please choose a date in the future`,\n      });\n      startButton.disabled = true;\n    } else {\n      startButton.disabled = false;\n    }\n  },\n};\nconst calendar = flatpickr('#datetime-picker', options);\nconst inputTime = document.querySelector('#datetime-picker');\nconst startButton = document.querySelector('button');\nstartButton.disabled = true;\n// ===================\nfunction convertMs(ms) {\n  // Number of milliseconds per unit of time\n  const second = 1000;\n  const minute = second * 60;\n  const hour = minute * 60;\n  const day = hour * 24;\n  // Remaining days\n  const days = Math.floor(ms / day);\n  // Remaining hours\n  const hours = Math.floor((ms % day) / hour);\n  // Remaining minutes\n  const minutes = Math.floor(((ms % day) % hour) / minute);\n  // Remaining seconds\n  const seconds = Math.floor((((ms % day) % hour) % minute) / second);\n  return { days, hours, minutes, seconds };\n}\nconst showTimer = document.querySelectorAll('.value');\nstartButton.addEventListener('click', event => {\n  const repeatTime = setInterval(() => {\n    timeInterval = userSelectedDate - new Date();\n    event.preventDefault();\n    inputTime.disabled = true;\n    if (timeInterval < 1) {\n      startButton.disabled = true;\n      inputTime.disabled = false;\n      clearInterval(repeatTime);\n      return;\n    }\n\n    const timer = convertMs(timeInterval);\n    showTimer[0].innerText = timer.days.toString().padStart(2, '0');\n    showTimer[1].innerText = timer.hours.toString().padStart(2, '0');\n    showTimer[2].innerText = timer.minutes.toString().padStart(2, '0');\n    showTimer[3].innerText = timer.seconds.toString().padStart(2, '0');\n  }, 1000);\n});\n"],"names":["userSelectedDate","timeInterval","options","selectedDates","iziToast","startButton","flatpickr","inputTime","convertMs","ms","days","hours","minutes","seconds","showTimer","event","repeatTime","timer"],"mappings":"sFAKA,IAAIA,EACAC,EAEJ,MAAMC,EAAU,CACd,WAAY,GACZ,UAAW,GACX,YAAa,IAAI,KACjB,gBAAiB,EACjB,QAAQC,EAAe,CACrBH,EAAmBG,EAAc,CAAC,EAClCF,EAAeD,EAAmBE,EAAQ,YACtCF,EAAmBE,EAAQ,aAC7BE,EAAS,MAAM,CACb,MAAO,MACP,MAAO,OACP,SAAU,YACV,QAAS,oCACjB,CAAO,EACDC,EAAY,SAAW,IAEvBA,EAAY,SAAW,EAE1B,CACH,EACiBC,EAAU,mBAAoBJ,CAAO,EACtD,MAAMK,EAAY,SAAS,cAAc,kBAAkB,EACrDF,EAAc,SAAS,cAAc,QAAQ,EACnDA,EAAY,SAAW,GAEvB,SAASG,EAAUC,EAAI,CAOrB,MAAMC,EAAO,KAAK,MAAMD,EAAK,KAAG,EAE1BE,EAAQ,KAAK,MAAOF,EAAK,MAAO,IAAI,EAEpCG,EAAU,KAAK,MAAQH,EAAK,MAAO,KAAQ,GAAM,EAEjDI,EAAU,KAAK,MAASJ,EAAK,MAAO,KAAQ,IAAU,GAAM,EAClE,MAAO,CAAE,KAAAC,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,CAAO,CACxC,CACA,MAAMC,EAAY,SAAS,iBAAiB,QAAQ,EACpDT,EAAY,iBAAiB,QAASU,GAAS,CAC7C,MAAMC,EAAa,YAAY,IAAM,CAInC,GAHAf,EAAeD,EAAmB,IAAI,KACtCe,EAAM,eAAc,EACpBR,EAAU,SAAW,GACjBN,EAAe,EAAG,CACpBI,EAAY,SAAW,GACvBE,EAAU,SAAW,GACrB,cAAcS,CAAU,EACxB,MACD,CAED,MAAMC,EAAQT,EAAUP,CAAY,EACpCa,EAAU,CAAC,EAAE,UAAYG,EAAM,KAAK,SAAQ,EAAG,SAAS,EAAG,GAAG,EAC9DH,EAAU,CAAC,EAAE,UAAYG,EAAM,MAAM,SAAQ,EAAG,SAAS,EAAG,GAAG,EAC/DH,EAAU,CAAC,EAAE,UAAYG,EAAM,QAAQ,SAAQ,EAAG,SAAS,EAAG,GAAG,EACjEH,EAAU,CAAC,EAAE,UAAYG,EAAM,QAAQ,SAAQ,EAAG,SAAS,EAAG,GAAG,CAClE,EAAE,GAAI,CACT,CAAC"}